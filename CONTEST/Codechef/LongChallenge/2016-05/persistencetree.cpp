
‚Å†‚Å†‚Å†‚Å†YESTERDAY‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:36 PM, 5/15/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Cool
‚Å†‚Å†‚Å†‚Å†9:36 PM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:37 PM, 5/15/2016] Suchand: ‚Å†‚Å†‚Å†i am sorry once again man but thanks a lot i hadn't soo much in long challenge
‚Å†‚Å†‚Å†‚Å†9:37 PM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:38 PM, 5/15/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Arre koi baat ni
‚Å†‚Å†‚Å†‚Å†9:38 PM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:29 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†SeaGcd2...got 10pts...Ìº†Ì≤ä‚Å†‚Å†‚Å†‚Å†6:29 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:29 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Ohh nice
‚Å†‚Å†‚Å†‚Å†6:29 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:29 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†How is the answer 13
‚Å†‚Å†‚Å†‚Å†6:29 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:30 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†I will draw on papper send u
‚Å†‚Å†‚Å†‚Å†6:30 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:30 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Ok
‚Å†‚Å†‚Å†‚Å†6:30 AM‚Å†‚Å†‚Å†‚Å†‚Å†


‚Å†‚Å†[6:33 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Here u go..
‚Å†‚Å†‚Å†‚Å†6:33 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:36 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Think about it..
‚Å†‚Å†‚Å†‚Å†6:36 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:39 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†If u get any optimized solution..plz tell me tooo
‚Å†‚Å†‚Å†‚Å†6:39 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:43 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Yea sure I might not be trying now I will try in night for sure
‚Å†‚Å†‚Å†‚Å†6:43 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:43 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Thank you very much
‚Å†‚Å†‚Å†‚Å†6:43 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:43 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Ohh..today..3:00pm lasted
‚Å†‚Å†‚Å†‚Å†6:43 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:44 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Ohh...then you keep trying
‚Å†‚Å†‚Å†‚Å†6:44 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:44 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Thanks..
‚Å†‚Å†‚Å†‚Å†6:44 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:44 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†I will see if I can
‚Å†‚Å†‚Å†‚Å†6:44 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[6:44 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†ÌºÑÌΩøœª
‚Å†‚Å†‚Å†‚Å†6:44 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:07 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Dude try easy quiries using persistent segmentree
‚Å†‚Å†‚Å†‚Å†8:07 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:07 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†You can find kth minimum in  given range using persistent segmentree tree in logn time
‚Å†‚Å†‚Å†‚Å†8:07 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:07 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†I think it will work
‚Å†‚Å†‚Å†‚Å†8:07 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:07 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†But I have no idea how it does but I have read about it
‚Å†‚Å†‚Å†‚Å†8:07 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:07 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†I have a sample code of it I think if you want I will send
‚Å†‚Å†‚Å†‚Å†8:07 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:35 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Thanks..anyway I also got. Same thing.but dont know how to code persistence segment tree
‚Å†‚Å†‚Å†‚Å†8:35 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:35 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Ohh....
‚Å†‚Å†‚Å†‚Å†8:35 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:35 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†You need the code for it ??
‚Å†‚Å†‚Å†‚Å†8:35 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[8:36 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Yeap..do u had?
‚Å†‚Å†‚Å†‚Å†8:36 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:20 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Yea I have
‚Å†‚Å†‚Å†‚Å†9:20 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:20 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†But I don't know how it works
‚Å†‚Å†‚Å†‚Å†9:20 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:22 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Can u send it to me?
‚Å†‚Å†‚Å†‚Å†9:22 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:22 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Read akulsaren blog about it
‚Å†‚Å†‚Å†‚Å†9:22 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:22 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†Yea I am searching for it
‚Å†‚Å†‚Å†‚Å†9:22 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:22 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Cool
‚Å†‚Å†‚Å†‚Å†9:22 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:23 AM, 5/16/2016] +91 85468 96750: ‚Å†‚Å†‚Å†Main thoda..seagcd2 main optimization..kr rha hun
‚Å†‚Å†‚Å†‚Å†9:23 AM‚Å†‚Å†‚Å†‚Å†‚Å†
‚Å†‚Å†[9:26 AM, 5/16/2016] Suchand: ‚Å†‚Å†‚Å†struct node
{
	ll count;
	node *left, *right;

	node(ll count, node *left, node *right):
		count(count), left(left), right(right) {}

	node* insert(ll l, ll r, ll w);
};

node *null = new node(0, NULL, NULL); //see line 135

node * node::insert(ll l, ll r, ll w)
{
	if(l <= w && w < r)
	{
		// With in the range, we need a new node
		if(l+1 == r)
		{
			return new node(this->count+1, null, null);
		}

		ll m = (l+r)>>1;

		return new node(this->count+1, this->left->insert(l, m, w), this->right->insert(m, r, w));
	}

	// Out of range, we can use previous tree node.
	return this;
}

ll query(node *a, node *b, ll l, ll r, ll k)
{
	if(l+1 == r)
	{
		return l;
	}

	ll m = (l+r)>>1;
	ll count = a->left->count - b->left->count;
	if(count >= k)
		return query(a->left, b->left, l, m, k);

	return query(a->right, b->right, m, r, k-count);
}
